loans$job <- as.factor(loans$job)
loans$default <- as.factor(loans$default)
str(loans)
data.frame <- loans
#to find the checking_balance column index
checking_balance_col_name <- grep('checking_balance', names(loans))
checking_balance_col_name
#to find the credit_history column index
credit_history_col_name <- grep('credit_history', names(loans))
credit_history_col_name
#to find the purpose column index
purpose_col_name <- grep('purpose', names(loans))
purpose_col_name
#to find the savings_balance column index
savings_balance_col_name <-grep('savings_balance', names(loans))
savings_balance_col_name
#to find the employment_duration column index
employment_duration_col_name <-grep('employment_duration', names(loans))
employment_duration_col_name
#to find the percent_of_income column index
percent_of_income_col_name <-grep('percent_of_income', names(loans))
percent_of_income_col_name
#to find the job column index
job_col_name <-grep('job', names(loans))
job_col_name
#to find the default column index
default_col_name <-grep('default', names(loans))
default_col_name
#select only the relevant columns from the data set
loans_A = loans[,c(1,3,4,6,7,8,14,16)]
head(loans_A)
tail(loans_A)
str(loans_A)
#-----------------------average values-------------------------
#to find the months_loan_duration column index
months_loan_duration_col_name <-grep('months_loan_duration', names(loans))
months_loan_duration_col_name
#to find the amount column index
amount_col_name <-grep('amount', names(loans))
amount_col_name
#to find the years_at_residence column index
years_at_residence_col_name <-grep('years_at_residence', names(loans))
years_at_residence_col_name
#to find the age column index
age_col_name <-grep('age', names(loans))
age_col_name
#to find the existing_loans_count column index
existing_loans_count_col_name <-grep('existing_loans_count', names(loans))
existing_loans_count_col_name
#to find the dependents column index
dependents_col_name <-grep('dependents', names(loans))
dependents_col_name
loans_B <- loans[,c(2,5,9,10,13,15)]
head(loans_B)
tail(loans_B)
str(loans_B)
#calculate the average value for loans_B each column
loans_B_average <- apply(loans_B,2,mean) #2 - column
loans_B_average
#------------------histogram-----------------------------
#specify separate default class yes and no
def_class_yes <- loans[loans$default == "yes",]
def_class_no <- loans[loans$default == "no", ]
head(def_class_yes)
str(def_class_yes)
head(def_class_no)
str(def_class_no)
#load the required library
library(ggplot2)
#Histogram for months_loan_duration by default class yes
qplot(def_class_yes$months_loan_duration,
geom="histogram",
main = "Histogram for months_loan_duration by default class yes",
xlab = "months loan duration",
fill=I("light blue"),
col=I("blue"))
#Histogram for months_loan_duration by default class no
qplot(def_class_no$months_loan_duration,
geom="histogram",
main = "Histogram for months_loan_duration by default class no",
xlab = "months loan duration",
fill=I("light green"),
col=I("dark green"))
install.packages("akima")
library(akima)
plot_data <- interp(loans$amount,loans$age,loans$months_loan_duration)
remove.packages("akima", lib="~/R/win-library/4.1")
library(rgl)
z <- loans$months_loan_duration
x <- loans$amount
y <- loans$age
zlim <- range(z)
colorlut <- terrain.colors(zlen,alpha=0) # height color lookup table
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen,alpha=0) # height color lookup table
col <- colorlut[ z-zlim[1]+1 ] # assign colors to heights for each point
open3d()
rgl.surface(x, y, z, color=col, alpha=0.75, back="lines")
library(rgl)
z <- 2 * loans # Exaggerate the relief
x <- 10 * (1:nrow(z)) # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z)) # 10 meter spacing (E to W)
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen,alpha=0) # height color lookup table
col <- colorlut[ z-zlim[1]+1 ] # assign colors to heights for each point
open3d()
#load the required libraries
library(RMySQL)
#to make the connection to the database
w1742266db <- dbConnect(MySQL(), dbname='w1742266',
user='root', password='',
host='localhost',
port=3306)
#list all the tables in the database
dbListTables(w1742266db)
#retrieving the data stored in the database
query <- dbSendQuery(w1742266db, "SELECT * FROM loans;")
loans <- dbFetch(query, n = -1) #-1 means all the records
loans
str(loans)
#transforming non-numerical features into factor form
loans$checking_balance <- as.factor(loans$checking_balance)
loans$credit_history <- as.factor(loans$credit_history)
loans$purpose <- as.factor(loans$purpose)
loans$savings_balance <- as.factor(loans$savings_balance)
loans$employment_duration <- as.factor(loans$employment_duration)
loans$other_credit <- as.factor(loans$other_credit)
loans$housing <- as.factor(loans$housing)
loans$job <- as.factor(loans$job)
loans$default <- as.factor(loans$default)
str(loans)
data.frame <- loans
#to find the checking_balance column index
checking_balance_col_name <- grep('checking_balance', names(loans))
checking_balance_col_name
#to find the credit_history column index
credit_history_col_name <- grep('credit_history', names(loans))
credit_history_col_name
#to find the purpose column index
purpose_col_name <- grep('purpose', names(loans))
purpose_col_name
#to find the savings_balance column index
savings_balance_col_name <-grep('savings_balance', names(loans))
savings_balance_col_name
#to find the employment_duration column index
employment_duration_col_name <-grep('employment_duration', names(loans))
employment_duration_col_name
#to find the percent_of_income column index
percent_of_income_col_name <-grep('percent_of_income', names(loans))
percent_of_income_col_name
#to find the job column index
job_col_name <-grep('job', names(loans))
job_col_name
#to find the default column index
default_col_name <-grep('default', names(loans))
default_col_name
#select only the relevant columns from the data set
loans_A = loans[,c(1,3,4,6,7,8,14,16)]
head(loans_A)
tail(loans_A)
str(loans_A)
#-----------------------average values-------------------------
#to find the months_loan_duration column index
months_loan_duration_col_name <-grep('months_loan_duration', names(loans))
months_loan_duration_col_name
#to find the amount column index
amount_col_name <-grep('amount', names(loans))
amount_col_name
#to find the years_at_residence column index
years_at_residence_col_name <-grep('years_at_residence', names(loans))
years_at_residence_col_name
#to find the age column index
age_col_name <-grep('age', names(loans))
age_col_name
#to find the existing_loans_count column index
existing_loans_count_col_name <-grep('existing_loans_count', names(loans))
existing_loans_count_col_name
#to find the dependents column index
dependents_col_name <-grep('dependents', names(loans))
dependents_col_name
loans_B <- loans[,c(2,5,9,10,13,15)]
head(loans_B)
tail(loans_B)
str(loans_B)
#calculate the average value for loans_B each column
loans_B_average <- apply(loans_B,2,mean) #2 - column
loans_B_average
#------------------histogram-----------------------------
#specify separate default class yes and no
def_class_yes <- loans[loans$default == "yes",]
def_class_no <- loans[loans$default == "no", ]
head(def_class_yes)
str(def_class_yes)
head(def_class_no)
str(def_class_no)
#load the required library
library(ggplot2)
#Histogram for months_loan_duration by default class yes
qplot(def_class_yes$months_loan_duration,
geom="histogram",
main = "Histogram for months_loan_duration by default class yes",
xlab = "months loan duration",
fill=I("light blue"),
col=I("blue"))
#Histogram for months_loan_duration by default class no
qplot(def_class_no$months_loan_duration,
geom="histogram",
main = "Histogram for months_loan_duration by default class no",
xlab = "months loan duration",
fill=I("light green"),
col=I("dark green"))
#-----------------------------3D plots------------------------
library(rgl)
#to find the amount column index
amount_col_name <-grep('amount', names(loans))
amount_col_name
#to find the age column index
age_col_name <-grep('age', names(loans))
age_col_name
#to find the month_loan_duration column index
month_loan_duration_col_name <-grep('month_loan_duration', names(loans))
month_loan_duration_col_name
#to find the months_loan_duration column index
months_loan_duration_col_name <-grep('months_loan_duration', names(loans))
months_loan_duration_col_name
loans_3d <- loans[,c(5, 10, 2)]
z <- 2 * loans_3d # Exaggerate the relief
x <- 10 * (1:nrow(z)) # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z)) # 10 meter spacing (E to W)
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen,alpha=0) # height color lookup table
col <- colorlut[ z-zlim[1]+1 ] # assign colors to heights for each point
open3d()
rgl.surface(x, y, z, color=col, alpha=0.75, back="lines")
install.packages("GGally")
library(GGally)
ggpairs(data = loans_raw, columns = 2,16, mapping = aes(color = default))
ggpairs(data = loans, columns = 2,16, mapping = aes(color = default))
ggpairs(data = loans, columns = 2, mapping = aes(color = default))
library(scatterplot3d)
scatterplot3d(loans[, c(5, 10)], color = as.numeric(loans$default))
#----------------------------scatter plot---------------------------
library(scatterplot3d)
scatterplot3d(loans[, c(5, 10, 2)], color = as.numeric(loans$default))
install.packages("rgl")
#3d scatter plot using base rgl
library(rgl)
#creating a matrix to work with
loansMatrix <- as.matrix(loans)
xl <- loansMatrix[,5] #amount
yl <- loansMatrix[,10] #age
zl <- loansMatrix[,2] #months_loan_duration
#using previous matrix
rgl1 <- plot3d(xl,yl,zl,
type = "p",
size = 4,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration")
#using previous matrix
rgl1 <- plot3d(xl,yl,zl,
type = "p",
size = 4,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
col = "light blue", "grey", "red")
#using previous matrix
rgl1 <- plot3d(xl,yl,zl,
type = "p",
size = 4,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
col = "color = default")
#using previous matrix
rgl1 <- plot3d(xl,yl,zl,
type = "p",
size = 4,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
col = "default")
#using previous matrix
rgl1 <- plot3d(xl,yl,zl,
type = "p",
size = 4,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
col = as.numeric(loans$default))
#using previous matrix
rgl1 <- plot3d(xl,yl,zl,
type = "s",
size = 4,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
col = as.numeric(loans$default))
#using previous matrix
rgl1 <- plot3d(xl,yl,zl,
type = "p",
size = 4,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
col = as.numeric(loans$default))
#load the required libraries
library(RMySQL)
#to make the connection to the database
w1742266db <- dbConnect(MySQL(), dbname='w1742266',
user='root', password='',
host='localhost',
port=3306)
#list all the tables in the database
dbListTables(w1742266db)
#retrieving the data stored in the database
query <- dbSendQuery(w1742266db, "SELECT * FROM loans;")
loans <- dbFetch(query, n = -1) #-1 means all the records
loans
str(loans)
#transforming non-numerical features into factor form
loans$checking_balance <- as.factor(loans$checking_balance)
loans$credit_history <- as.factor(loans$credit_history)
loans$purpose <- as.factor(loans$purpose)
loans$savings_balance <- as.factor(loans$savings_balance)
loans$employment_duration <- as.factor(loans$employment_duration)
loans$other_credit <- as.factor(loans$other_credit)
loans$housing <- as.factor(loans$housing)
loans$job <- as.factor(loans$job)
loans$default <- as.factor(loans$default)
str(loans)
#to find the checking_balance column index
checking_balance_col_name <- grep('checking_balance', names(loans))
checking_balance_col_name
#to find the credit_history column index
credit_history_col_name <- grep('credit_history', names(loans))
credit_history_col_name
#to find the purpose column index
purpose_col_name <- grep('purpose', names(loans))
purpose_col_name
#to find the savings_balance column index
savings_balance_col_name <-grep('savings_balance', names(loans))
savings_balance_col_name
#to find the employment_duration column index
employment_duration_col_name <-grep('employment_duration', names(loans))
employment_duration_col_name
#to find the percent_of_income column index
percent_of_income_col_name <-grep('percent_of_income', names(loans))
percent_of_income_col_name
#to find the job column index
job_col_name <-grep('job', names(loans))
job_col_name
#to find the default column index
default_col_name <-grep('default', names(loans))
default_col_name
#select only the relevant columns from the data set
loans_A = loans[,c(1,3,4,6,7,8,14,16)]
head(loans_A)
tail(loans_A)
str(loans_A)
#-----------------------average values-------------------------
#to find the months_loan_duration column index
months_loan_duration_col_name <-grep('months_loan_duration', names(loans))
months_loan_duration_col_name
#to find the amount column index
amount_col_name <-grep('amount', names(loans))
amount_col_name
#to find the years_at_residence column index
years_at_residence_col_name <-grep('years_at_residence', names(loans))
years_at_residence_col_name
#to find the age column index
age_col_name <-grep('age', names(loans))
age_col_name
#to find the existing_loans_count column index
existing_loans_count_col_name <-grep('existing_loans_count', names(loans))
existing_loans_count_col_name
#to find the dependents column index
dependents_col_name <-grep('dependents', names(loans))
dependents_col_name
loans_B <- loans[,c(2,5,9,10,13,15)]
head(loans_B)
tail(loans_B)
str(loans_B)
#calculate the average value for loans_B each column
loans_B_average <- apply(loans_B,2,mean) #2 - column
loans_B_average
#------------------histogram-----------------------------
#load the required library
library(ggplot2)
#density plot of the months_loan_duration variable
qplot(months_loan_duration, data = loans,
geom = "histogram",
color = default,
main = "Histogram for months_loan_duration by default classes",
xlab = "months loan duration",
fill = default, alpha = I(0.35))
#-----------------------------3D plots------------------------
#3d scatter plot using base rgl
library(rgl)
#creating a matrix to work with
loansMatrix <- as.matrix(loans)
xl <- loansMatrix[,5] #amount
yl <- loansMatrix[,10] #age
zl <- loansMatrix[,2] #months_loan_duration
#using previous matrix
rgl_3d_plot <- plot3d(xl,yl,zl,
type = "p",
size = 4,
main = " 3D plot of amount, age, month_loan_duration with colour separation of two default classes using rgl",
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
col = as.numeric(loans$default))
rgl_3d_plot
#3d scatter plot using the lattice package
#load the required libraries
library(lattice)
library(car)
lattice_3d_plot <- cloud(months_loan_duration ~ amount + age, data = loans,
xlab = "Amount",
ylab = "Age",
zlab = "Months loan duration",
main = "3D plot of amount, age, month_loan_duration
with colour separation of two default classes using
lattice package",
pch = 16,
groups = default,
aspect = c(1,1),
panel.aspect = 0.7,
screen = list(z = 50, x = -50))
lattice_3d_plot
#3d scatter plot using the scatterplot3d package
library(scatterplot3d)
scatterplot3d(loans[, c(5, 10, 2)],
main = "3D plot of amount, age, month_loan_duration
with colour separation of two default classes using
scatterplot3d package",
color = as.numeric(loans$default))
#----------------------------scatter plot---------------------------
ggplot(loans, aes(amount, age, color = default)) + geom_point() +
ggtitle("A scatter plot of amount and age with colour separation of
two default classes") +
xlab("Amount") +
ylab("Age")
#-------------split the data set into train_data and test_data sets-----------
#set the random seed to get same split in every execution
set.seed(124)
#Split loans data into train_data and test_data
loans_train.indices <- sample(1:nrow(loans), 800)
train_data <- loans[loans_train.indices,]
train_data
str(train_data)
test_data <- loans[-loans_train.indices,]
test_data
str(test_data)
dim(train_data)
dim(test_data)
#------------creating a decision tree models--------------------
#load the required libraries
library(caret)
library(C50)
library(rpart)
library(rpart.plot)
#----------creating a decision tree model based on C5.0 algorithm---------
decision_tree_model <- C5.0(default~., data = train_data)
#get the predictions
prediction_results <- predict(object = decision_tree_model, newdata = test_data,
type="class")
confusion_matrix_c5.0 <- confusionMatrix(prediction_results, test_data$default)
confusion_matrix_c5.0
#----------creating a decision tree model based on CART algorithm---------
#implement the decision tree model
decision_tree <- rpart(default~., data = train_data,method = 'class', cp=.03)
print(decision_tree)
#visualize the decision tree
rpart.plot(decision_tree, box.col=c("light blue", "grey"))
#get the predictions for the test_data set
prediction_results <-predict(decision_tree, newdata = test_data,type = 'class')
confusion_matrix_cart <- confusionMatrix(prediction_results,test_data$default)
confusion_matrix_cart
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
shiny::runApp('Project/Shiny/w1742266_FYP')
shiny::runApp('Project/Shiny/w1742266_FYP')
setwd(rstudioapi::getActiveProject())
shiny::runApp('Project/Shiny/w1742266_FYP')
setwd("~/Project/Sri Lanka Tourism Demand Forecasting System/rsconnect")
gc()
gc()
library(neuralnet)
library(datasets)
# Split data
train_idx <- sample(nrow(iris), 2/3 * nrow(iris))
iris_train <- iris[train_idx, ]
iris_test <- iris[-train_idx, ]
# Binary classification
nn <- neuralnet(Species == "setosa" ~ Petal.Length + Petal.Width, iris_train, linear.output = FALSE)
pred <- predict(nn, iris_test)
table(iris_test$Species == "setosa", pred[, 1] > 0.5)
# Multiclass classification
nn <- neuralnet((Species == "setosa") + (Species == "versicolor") + (Species == "virginica")
~ Petal.Length + Petal.Width, iris_train, linear.output = FALSE)
pred <- predict(nn, iris_test)
table(iris_test$Species, apply(pred, 1, which.max))
shiny::runApp('Project/Prototype SLTDFS')
setwd("~/Project/Resources/Shinyapp.io SLTDFS")
